.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Koha::ILL::Backend::Standard 3pm"
.TH Koha::ILL::Backend::Standard 3pm "2025-09-02" "perl v5.32.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Koha::ILL::Backend::Standard \- Koha ILL Backend: Standard
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
Koha \s-1ILL\s0 implementation for the \*(L"Standard\*(R" backend .
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
.SS "Overview"
.IX Subsection "Overview"
We will be providing the Abstract interface which requires we implement the
following methods:
\&\- create        \-> initial placement of the request for an \s-1ILL\s0 order
\&\- confirm       \-> confirm placement of the \s-1ILL\s0 order (No-op in Standard)
\&\- cancel        \-> request an already 'confirm'ed \s-1ILL\s0 order be cancelled
\&\- status_graph  \-> return a hashref of additional statuses
\&\- name          \-> return the name of this backend
\&\- metadata      \-> return mapping of fields from requestattributes
.SS "On the Standard backend"
.IX Subsection "On the Standard backend"
The Standard backend is a simple backend that is supposed to act as a
fallback.  It provides the end user with some mandatory fields in a form as
well as the option to enter additional fields with arbitrary names & values.
.SH "API"
.IX Header "API"
.SS "Class Methods"
.IX Subsection "Class Methods"
\fInew\fR
.IX Subsection "new"
.PP
my \f(CW$backend\fR = Koha::ILL::Backend::Standard\->new;
.PP
\fIname\fR
.IX Subsection "name"
.PP
Return the name of this backend.
.PP
\fIcapabilities\fR
.IX Subsection "capabilities"
.PP
.Vb 1
\&    $capability = $backend\->capabilities($name);
.Ve
.PP
Return the sub implementing a capability selected by \s-1NAME,\s0 or 0 if that
capability is not implemented.
.PP
\fImetadata\fR
.IX Subsection "metadata"
.PP
Return a hashref containing canonical values from the key/value
illrequestattributes store. We may want to ignore certain values
that we do not consider to be metadata
.PP
\fIstatus_graph\fR
.IX Subsection "status_graph"
.PP
This backend provides no additional actions on top of the core_status_graph.
.PP
\fIcreate\fR
.IX Subsection "create"
.PP
.Vb 1
\&  my $response = $backend\->create({ params => $params });
.Ve
.PP
We just want to generate a form that allows the end-user to associate key
value pairs in the database.
.PP
\fIedititem\fR
.IX Subsection "edititem"
.PP
\fIconfirm\fR
.IX Subsection "confirm"
.PP
.Vb 1
\&  my $response = $backend\->confirm({ params => $params });
.Ve
.PP
Confirm the placement of the previously \*(L"selected\*(R" request (by using the
\&'create' method).
.PP
In the Standard backend we only want to display a bit of text to let staff
confirm that they have taken the steps they need to take to \*(L"confirm\*(R" the
request.
.PP
\fIcancel\fR
.IX Subsection "cancel"
.PP
.Vb 1
\&  my $response = $backend\->cancel({ params => $params });
.Ve
.PP
We will attempt to cancel a request that was confirmed.
.PP
In the Standard backend this simply means displaying text to the librarian
asking them to confirm they have taken all steps needed to cancel a confirmed
request.
.PP
\fImigrate\fR
.IX Subsection "migrate"
.PP
Migrate a request into or out of this backend.
.PP
\fIillview\fR
.IX Subsection "illview"
.PP
.Vb 1
\&   View and manage an ILL request
.Ve
.PP
\fI_get_requested_partners\fR
.IX Subsection "_get_requested_partners"
.PP
\fI_set_requested_partners\fR
.IX Subsection "_set_requested_partners"
.PP
\fI_validate_borrower\fR
.IX Subsection "_validate_borrower"
.PP
\fI_get_custom\fR
.IX Subsection "_get_custom"
.PP
\fI_prepare_custom\fR
.IX Subsection "_prepare_custom"
.PP
\fI_get_request_details\fR
.IX Subsection "_get_request_details"
.PP
.Vb 1
\&    my $request_details = _get_request_details($params, $other);
.Ve
.PP
Return the illrequestattributes for a given request
.PP
\fI_get_core_string\fR
.IX Subsection "_get_core_string"
.PP
Return a comma delimited, quoted, string of core field keys
.PP
\fI_get_core_fields\fR
.IX Subsection "_get_core_fields"
.PP
Return a hashref of core fields
.PP
\fIadd_request\fR
.IX Subsection "add_request"
.PP
Add an \s-1ILL\s0 request
.PP
\fI_openurl_to_ill\fR
.IX Subsection "_openurl_to_ill"
.PP
Take a hashref of OpenURL parameters and return
those same parameters but transformed to the \s-1ILL\s0
schema
.PP
\fIcreate_api\fR
.IX Subsection "create_api"
.PP
Create a local submission from data supplied via an
\&\s-1API\s0 call
.PP
\fI_can_create_request\fR
.IX Subsection "_can_create_request"
.PP
Given the parameters we've been passed, should we create the request
.PP
\fI_standard_request2biblio\fR
.IX Subsection "_standard_request2biblio"
.PP
Given supplied metadata from a Standard request, create a basic biblio
record and return its \s-1ID\s0
.PP
\fI_set_suppression\fR
.IX Subsection "_set_suppression"
.PP
.Vb 1
\&    _set_suppression($record);
.Ve
.PP
Take a MARC::Record object and set it to be suppressed
.SH "AUTHORS"
.IX Header "AUTHORS"
Alex Sassmannshausen <alex.sassmannshausen@ptfs\-europe.com>
Martin Renvoize <martin.renvoize@ptfs\-europe.com>
Andrew Isherwood <andrew.isherwood@ptfs\-europe.com>
