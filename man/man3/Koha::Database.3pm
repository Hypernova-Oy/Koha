.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Koha::Database 3pm"
.TH Koha::Database 3pm "2025-09-02" "perl v5.32.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Koha::Database
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&  use Koha::Database;
\&  my $schema = Koha::Database\->schema();
.Ve
.SH "FUNCTIONS"
.IX Header "FUNCTIONS"
.SS "new"
.IX Subsection "new"
.Vb 1
\&    $schema = Koha::Database\->new\->schema;
\&
\&    FIXME: It is useless to have a Koha::Database object since all methods
\&    below act as class methods
\&    Koha::Database\->new\->schema is exactly the same as Koha::Database\->schema
\&    We should use Koha::Database\->schema everywhere and remove the \`new\` method
.Ve
.SS "dbh"
.IX Subsection "dbh"
.Vb 1
\&    Returns a database handler without loading the DBIx::Class schema.
.Ve
.SS "schema"
.IX Subsection "schema"
.Vb 2
\&    $schema = Koha::Database\->schema;
\&    $schema = Koha::Database\->schema({ new => 1 });
.Ve
.PP
Returns a database handle connected to the Koha database for the
current context. If no connection has yet been made, this method
creates one, and connects to the database.
.PP
This database handle is cached for future use: if you call
\&\f(CW\*(C`$database\->schema\*(C'\fR twice, you will get the same handle both
times.
.SS "db_scheme2dbi"
.IX Subsection "db_scheme2dbi"
.Vb 1
\&    my $dbd_driver_name = Koha::Database::db_scheme2dbi($scheme);
.Ve
.PP
This routines translates a database type to part of the name
of the appropriate \s-1DBD\s0 driver to use when establishing a new
database connection.  It recognizes 'mysql' and 'Pg'; if any
other scheme is supplied it defaults to 'mysql'.
.SS "generate_dsn"
.IX Subsection "generate_dsn"
.Vb 1
\&    my $dsn = Koha::Database::generate_dsn($config);
.Ve
.PP
Returns a data source name (\s-1DSN\s0) for a database connection
from the config instance.
.SS "\s-1EXPORT\s0"
.IX Subsection "EXPORT"
None by default.
.SH "AUTHOR"
.IX Header "AUTHOR"
Chris Cormack, <chrisc@catalyst.net.nz>
