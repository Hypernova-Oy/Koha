.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Koha::Object::Mixin::AdditionalFields 3pm"
.TH Koha::Object::Mixin::AdditionalFields 3pm "2025-09-02" "perl v5.32.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Koha::Object::Mixin::AdditionalFields
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    package Koha::Foo;
\&
\&    use parent qw( Koha::Object Koha::Object::Mixin::AdditionalFields );
\&
\&    sub _type { \*(AqFoo\*(Aq }
\&
\&
\&    package main;
\&
\&    use Koha::Foo;
\&
\&    Koha::Foos\->find($id)\->set_additional_fields(...);
.Ve
.SH "API"
.IX Header "API"
.SS "Public methods"
.IX Subsection "Public methods"
\fIset_additional_fields\fR
.IX Subsection "set_additional_fields"
.PP
.Vb 10
\&    $foo\->set_additional_fields([
\&        {
\&            id => 1,
\&            value => \*(Aqfoo\*(Aq,
\&        },
\&        {
\&            id => 2,
\&            value => \*(Aqbar\*(Aq,
\&        }
\&    ]);
.Ve
.PP
\fIprepare_cgi_additional_field_values\fR
.IX Subsection "prepare_cgi_additional_field_values"
.PP
Prepares additional field values from \s-1CGI\s0 input for use in set_additional_fields
.PP
.Vb 2
\&    Usage example for aqorders:
\&    my @additional_fields = $order\->prepare_cgi_additional_field_values( $input, \*(Aqaqorders\*(Aq );
.Ve
.PP
\fIadd_additional_fields\fR
.IX Subsection "add_additional_fields"
.PP
Similar to set_additional_fields, but instead of overwriting existing fields, only adds new ones
.PP
.Vb 10
\&    $foo\->add_additional_fields(
\&        {
\&            \*(Aq2\*(Aq => [
\&                \*(Aqfirst value for field 2\*(Aq,
\&                \*(Aqsecond value for field 2\*(Aq
\&            ],
\&            \*(Aq1\*(Aq => [\*(Aqfirst value for field 1\*(Aq]
\&        },
\&        \*(Aqsubscription\*(Aq
\&    );
.Ve
.PP
\fIget_additional_field_values_for_template\fR
.IX Subsection "get_additional_field_values_for_template"
.PP
Returns additional field values in the format expected by the .tt file
.PP
.Vb 1
\&    my $fields =  Koha::Acquisition::Baskets\->find($basketno)\->get_additional_field_values_for_template;
.Ve
.PP
Expected format is a hash of arrays, where the hash key is the field id and its respective array contains
the field values 'value' for that field. Example where field_id = 2 is the only repeatable field:
.PP
{
    '3' => ['first value for field 3'],
    '1' => ['first value for field 1'],
    '4' => ['first value for field 4'],
    '2' => [
        'first value for field 2',
        'second value for field 2',
        'third value for field 2'
    ]
};
.PP
\fIadditional_field_values\fR
.IX Subsection "additional_field_values"
.PP
Returns additional field values
.PP
.Vb 1
\&    my @values = $foo\->additional_field_values;
.Ve
.PP
\fIextended_attributes\fR
.IX Subsection "extended_attributes"
.PP
\&\s-1REST API\s0 embed of additional_field_values
.PP
\fIstrings_map\fR
.IX Subsection "strings_map"
.PP
Returns a map of column name to string representations including the string,
the mapping type and the mapping category where appropriate.
.PP
Currently handles additional fields values mappings.
.PP
Accepts a param hashref where the 'public' key denotes whether we want the public
or staff interface strings.
.SH "AUTHOR"
.IX Header "AUTHOR"
Koha Development Team <http://koha\-community.org/>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
Copyright 2018 BibLibre
.PP
This file is part of Koha.
.PP
Koha is free software; you can redistribute it and/or modify it under the
terms of the \s-1GNU\s0 General Public License as published by the Free Software
Foundation; either version 3 of the License, or (at your option) any later
version.
.PP
Koha is distributed in the hope that it will be useful, but \s-1WITHOUT ANY
WARRANTY\s0; without even the implied warranty of \s-1MERCHANTABILITY\s0 or \s-1FITNESS FOR
A PARTICULAR PURPOSE.\s0 See the \s-1GNU\s0 General Public License for more details.
.PP
You should have received a copy of the \s-1GNU\s0 General Public License along
with Koha; if not, see <http://www.gnu.org/licenses>.
