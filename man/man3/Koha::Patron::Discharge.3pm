.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Koha::Patron::Discharge 3pm"
.TH Koha::Patron::Discharge 3pm "2025-09-25" "perl v5.32.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Koha::Patron::Discharge \- Koha Discharge object class
.SH "API"
.IX Header "API"
.SS "Class Methods"
.IX Subsection "Class Methods"
\fIcount\fR
.IX Subsection "count"
.PP
.Vb 1
\&    Koha::Patron:Discharge\->count;
.Ve
.PP
Return the number of discharges corresponding to the asked criteria
.PP
\fIcan_be_discharged\fR
.IX Subsection "can_be_discharged"
.PP
.Vb 1
\&    my $can_be_discharged = Koha::Patron:Discharge\->can_be_discharged({borrowernumber => $borrowernumber});
.Ve
.PP
Return true if the borrower can be discharged
.PP
\fIis_discharged\fR
.IX Subsection "is_discharged"
.PP
.Vb 1
\&    my $is_discharged = Koha::Patron:Discharge\->is_discharged({borrowernumber => $borrowernumber});
.Ve
.PP
Return true if the borrower is discharged
.PP
\fIrequest\fR
.IX Subsection "request"
.PP
.Vb 1
\&    my $request = Koha::Patron:Discharge\->request({borrowernumber => $borrowernumber});
.Ve
.PP
Place a discharge request on a given borrower after checking the borrower has the right to be discharged.
.PP
\fIdischarge\fR
.IX Subsection "discharge"
.PP
.Vb 1
\&    my $request = Koha::Patron:Discharge\->discharge({borrowernumber => $borrowernumber});
.Ve
.PP
Place a discharge request on a given borrower, if a discharge was requested, update the status to discharged and place a suspension on the user.
.PP
\fIgenerate_as_pdf\fR
.IX Subsection "generate_as_pdf"
.PP
.Vb 1
\&    my $request = Koha::Patron:Discharge\->generate_as_pdf({borrowernumber => $borrowernumber});
.Ve
.PP
Create a pdf from an existing discharge associated to the borrowernumber.
.PP
\fIget_pendings\fR
.IX Subsection "get_pendings"
.PP
.Vb 4
\&    my $rs = Koha::Patron:Discharge\->get_pendings({
\&        borrowernumber => $borrowernumber
\&        branchcode => $branchcode
\&    });
.Ve
.PP
Get all pending discharges associated to a borrowernumber and/or a given branch
.PP
\fIget_validated\fR
.IX Subsection "get_validated"
.PP
.Vb 4
\&    my $rs = Koha::Patron:Discharge\->get_validated({
\&        borrowernumber => $borrowernumber
\&        branchcode => $branchcode
\&    });
.Ve
.PP
Get all validated discharges associated to a borrowernumber and/or a given branch
.PP
\fIsearch_limited\fR
.IX Subsection "search_limited"
.PP
.Vb 4
\&    my $rs = Koha::Patron:Discharge\->search_limited({
\&        borrower.branchcode => $branchcode
\&    },
\&    $attributes);
.Ve
.PP
Search all discharges that can be seen by the user and fitting the given conditions
