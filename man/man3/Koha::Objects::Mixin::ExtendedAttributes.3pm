.\" Automatically generated by Pod::Man 4.10 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Koha::Objects::Mixin::ExtendedAttributes 3pm"
.TH Koha::Objects::Mixin::ExtendedAttributes 3pm "2025-04-28" "perl v5.28.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Koha::Objects::Mixin::ExtendedAttributes
.SS "Class methods"
.IX Subsection "Class methods"
\fIsearch\fR
.IX Subsection "search"
.PP
.Vb 1
\&    Overwrites the search method to include extended attributes rewrite and dynamic relation accessors
.Ve
.PP
\fIhandle_query_extended_attributes\fR
.IX Subsection "handle_query_extended_attributes"
.PP
.Vb 2
\&    Checks for the presence of extended_attributes in a query
\&    If present, it builds the dynamic extended attributes relations and rewrites the query to include the extended_attributes relation
.Ve
.PP
\fI_get_extended_attributes_entries\fR
.IX Subsection "_get_extended_attributes_entries"
.PP
.Vb 1
\&    $self\->_get_extended_attributes_entries( $filtered_params, 0 )
.Ve
.PP
Recursive function that returns the rewritten extended_attributes query entries.
.PP
Given:
[
    '\-and',
    [
        {
            'extended_attributes.code'      => '\s-1CODE_1\s0',
            'extended_attributes.attribute' => { 'like' => '%Bar%' }
        },
        {
            'extended_attributes.attribute' => { 'like' => '%Bar%' },
            'extended_attributes.code'      => '\s-1CODE_2\s0'
        }
    ]
];
.PP
Returns :
.PP
[
    '\s-1CODE_1\s0',
    '\s-1CODE_2\s0'
]
.PP
\fI_rewrite_related_metadata_query\fR
.IX Subsection "_rewrite_related_metadata_query"
.PP
.Vb 2
\&        $extended_attributes_entries =
\&            _rewrite_related_metadata_query( $params, \*(Aqfield_id\*(Aq, \*(Aqvalue\*(Aq, @array )
.Ve
.PP
Helper function that rewrites all subsequent extended_attributes queries to match the alias generated by the dbic self left join
Take the below example (patrons):
        [
            {
                \*(L"extended_attributes.attribute\*(R":{\*(L"like\*(R":\*(L"%123%\*(R"},
                \*(L"extended_attributes.code\*(R":\*(L"\s-1CODE_1\*(R"\s0
            }
        ],
        [
            {
                \*(L"extended_attributes.attribute\*(R":{\*(L"like\*(R":\*(L"%abc%\*(R" },
                \*(L"extended_attributes.code\*(R":\*(L"\s-1CODE_2\*(R"\s0
            }
        ]
.PP
It'll be rewritten as:
        [
            {
                'extended_attributes_CODE_1.attribute' => { 'like' => '%123%' },
                'extended_attributes_CODE_1.code' => '\s-1CODE_1\s0'
            }
        ],
            [
            {
                'extended_attributes_CODE_2.attribute' => { 'like' => '%abc%' },
                'extended_attributes_CODE_2.code' => '\s-1CODE_2\s0'
            }
        ]
.PP
\fI_build_extended_attributes_relations\fR
.IX Subsection "_build_extended_attributes_relations"
.PP
.Vb 1
\&    Method to dynamically add has_many relations for Koha classes that support extended_attributes.
\&
\&    Returns a list of relation accessor names.
.Ve
